{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"lodash\"","webpack:///./module.ts","webpack:///./SeriesWrapper.ts","webpack:///./editor.ts","webpack:///./libLoader.ts","webpack:///../node_modules/scriptjs/dist/script.js","webpack:///./anno.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","default","object","property","prototype","hasOwnProperty","p","s","e","__WEBPACK_EXTERNAL_MODULE__0__","_sdk","u","_SeriesWrapper","_editor","_libLoader","_anno","Plotly","PlotlyPanelCtrl","_super","$scope","$injector","$window","$rootScope","uiSegmentSrv","annotationsSrv","_this","this","annotations","AnnoInfo","seriesByKey","Map","seriesHash","doResize","_lodash2","debounce","window","getComputedStyle","graphDiv","display","rect","getBoundingClientRect","layout","width","height","redraw","console","warn","deepCopyWithTemplates","obj","isArray","map","val","isString","templateSrv","replace","panel","scopedVars","isObject","copy_1","forEach","v","k","_hadAnno","initialized","defaultsDeep","defaults","cfg","pconfig","traces","a","events","loadPlotly","then","log","on","onRender","onDataReceived","onDataError","onResize","onDataSnapshotLoad","onRefresh","refresh","onInitEditMode","__extends","$inject","getCssRule","selectorText","styleSheets","document","idx","length","rules","cssRules","ruleIdx","rule","err","series","clear","render","otherPanelInFullscreenMode","editor","EditorHelper","addEditorTab","onConfigChanged","setTimeout","processConfigMigration","configVersion","plot_bgcolor","paper_bgcolor","autosize","margin","scene","is3d","zaxis","settings","old","show_1","markers","indexOf","lines","trace","show","version","onPanelInitialized","_updateTraceData","getProcessedLayout","xaxis","yaxis","fixScale","scaleanchor","b","pad","type","mapping","isDate","title","range","timeSrv","timeRange","from","valueOf","to","labelStyle","color","style","font","_jquery2","parse","scale","toString","gridcolor","yaxis2","options","showLink","displaylogo","displayModeBar","modeBarButtonsToRemove","shapes","concat","react","data","points","pointNumber","ts","msg","x","toPrecision","y","appEvent","dashboard","formatDate","_moment2","min","Number","MAX_SAFE_INTEGER","max","MIN_SAFE_INTEGER","found","fullData","Math","utc","setTime","Plots","purge","innerHTML","snapshot","dataList","finfo","useRefID_1","targets","sidx","refId","String","fromCharCode","charCodeAt","columns","push","SeriesWrapperTable","SeriesWrapperTableRow","target","SeriesWrapperSeries","error","getAllKeys","set","hchanged","updateMappings","selectTrace","traceIndex","annotationPromise","Promise","resolve","showAnnotations","getAnnotations","results","hasAnno","update","__addCopyPath","path","__set","dataWarnings","_updateTracesFromConfigs","cloneDeep","defaultTrace","is3D","tconfig","config","createTraceName","marker","sizemin","sizemode","sizeref","color_option","colorscale","showscale","line","text","z","substring","force","zero","vals","toArray","Array","loadIfNecessary","res","link","scope","elem","attrs","ctrl","find","evt","mouse","templateUrl","size","dash","shape","symbol","visible","loadFromCDN","showlegend","legend","orientation","dragmode","hovermode","family","showgrid","zeroline","rangemode","MetricsPanelCtrl","SeriesWrapper","setFirst","first","isNumber","_typeof","getKey","count","datapoints","arr","table","rows","index","col","Error","row","h","_module","REMOVE_KEY","axis","defaultMappings","time","changed","onUpdateAxis","label","segment","deepClone","newSegment","updateSegMapping","updateTrace","fake","opts","html","createTrace","removeCurrentTrace","splice","getSeriesSegs","withRemove","reject","onAxisSeriesChanged","getTextSegments","onTextMetricChanged","sss","seg","getColorSegments","onColorChanged","onSymbolChanged","getSymbolSegs","segs","loaded","wasCDN","isFull","_scriptjs2","needsFull","url","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","definition","scriptpath","urlArgs","doc","head","getElementsByTagName","f","readyState","onreadystatechange","ids","delay","scripts","every","ar","fn","j","el","$script","paths","idOrDone","optDone","idOrDoneIsDone","done","id","join","queue","loopFn","item","list","callback","dset","split","each","test","loading","createElement","onload","onerror","async","src","insertBefore","lastChild","shift","str","ready","deps","req","missing","dep","assign","arguments","apply","hoverinfo","annotation","iconColor","xref","yref","x0","y0","x1","y1","layer","fillcolor","opacity"],"mappings":"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","file":"module.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","/* -*- Mode: typescript; indent-tabs-mode: nil; typescript-indent-level: 2 -*- */\n\n///<reference path=\"../node_modules/grafana-sdk-mocks/app/headers/common.d.ts\" />\n\nimport {MetricsPanelCtrl} from 'app/plugins/sdk';\n\nimport _ from 'lodash';\nimport moment from 'moment';\nimport $ from 'jquery';\n\nimport {\n  SeriesWrapper,\n  SeriesWrapperSeries,\n  SeriesWrapperTable,\n  SeriesWrapperTableRow,\n} from './SeriesWrapper';\nimport {EditorHelper} from './editor';\n\nimport {loadPlotly, loadIfNecessary} from './libLoader';\nimport {AnnoInfo} from './anno';\nimport {Axis} from 'plotly.js';\n\nlet Plotly: any; // Loaded dynamically!\n\nclass PlotlyPanelCtrl extends MetricsPanelCtrl {\n  static templateUrl = 'partials/module.html';\n  static configVersion = 1; // An index to help config migration\n\n  initialized: boolean;\n  //$tooltip: any;\n\n  static defaultTrace = {\n    mapping: {\n      x: null,\n      y: null,\n      z: null,\n      text: null,\n      color: null,\n      size: null,\n    },\n    show: {\n      line: true,\n      markers: true,\n    },\n    settings: {\n      line: {\n        color: '#005f81',\n        width: 6,\n        dash: 'solid',\n        shape: 'linear',\n      },\n      marker: {\n        size: 15,\n        symbol: 'circle',\n        color: '#33B5E5',\n        colorscale: 'YlOrRd',\n        sizemode: 'diameter',\n        sizemin: 3,\n        sizeref: 0.2,\n        line: {\n          color: '#DDD',\n          width: 0,\n        },\n        showscale: false,\n      },\n      color_option: 'ramp',\n    },\n  };\n\n  static yaxis2: Partial<Axis> = {\n    title: 'Annotations',\n    type: 'linear',\n    range: [0, 1],\n    visible: false,\n  };\n\n  static defaults = {\n    pconfig: {\n      loadFromCDN: false,\n      showAnnotations: true,\n      fixScale: '',\n      traces: [PlotlyPanelCtrl.defaultTrace],\n      settings: {\n        type: 'scatter',\n        displayModeBar: false,\n      },\n      layout: {\n        showlegend: false,\n        legend: {\n          orientation: 'h',\n        },\n        dragmode: 'lasso', // (enumerated: \"zoom\" | \"pan\" | \"select\" | \"lasso\" | \"orbit\" | \"turntable\" )\n        hovermode: 'closest',\n        font: {\n          family: '\"Open Sans\", Helvetica, Arial, sans-serif',\n        },\n        xaxis: {\n          showgrid: true,\n          zeroline: false,\n          type: 'auto',\n          rangemode: 'normal', // (enumerated: \"normal\" | \"tozero\" | \"nonnegative\" )\n        },\n        yaxis: {\n          showgrid: true,\n          zeroline: false,\n          type: 'linear',\n          rangemode: 'normal', // (enumerated: \"normal\" | \"tozero\" | \"nonnegative\" ),\n        },\n        zaxis: {\n          showgrid: true,\n          zeroline: false,\n          type: 'linear',\n          rangemode: 'normal', // (enumerated: \"normal\" | \"tozero\" | \"nonnegative\" )\n        },\n      },\n    },\n  };\n\n  graphDiv: any;\n  annotations = new AnnoInfo();\n  series: SeriesWrapper[];\n  seriesByKey: Map<string, SeriesWrapper> = new Map();\n  seriesHash = '?';\n\n  traces: any[]; // The data sent directly to Plotly -- with a special __copy element\n  layout: any; // The layout used by Plotly\n\n  mouse: any;\n  cfg: any;\n\n  // For editor\n  editor: EditorHelper;\n  dataWarnings: string[]; // warnings about loading data\n\n  /** @ngInject **/\n  constructor(\n    $scope,\n    $injector,\n    $window,\n    private $rootScope,\n    public uiSegmentSrv,\n    private annotationsSrv\n  ) {\n    super($scope, $injector);\n\n    this.initialized = false;\n\n    //this.$tooltip = $('<div id=\"tooltip\" class=\"graph-tooltip\">');\n\n    // defaults configs\n    _.defaultsDeep(this.panel, PlotlyPanelCtrl.defaults);\n\n    this.cfg = this.panel.pconfig;\n\n    this.traces = [];\n\n    // ?? This seems needed for tests?!!\n    if (!this.events) {\n      return;\n    }\n\n    loadPlotly(this.cfg).then(v => {\n      Plotly = v;\n      console.log('Plotly', v);\n\n      // Wait till plotly exists has loaded before we handle any data\n      this.events.on('render', this.onRender.bind(this));\n      this.events.on('data-received', this.onDataReceived.bind(this));\n      this.events.on('data-error', this.onDataError.bind(this));\n      this.events.on('panel-size-changed', this.onResize.bind(this));\n      this.events.on('data-snapshot-load', this.onDataSnapshotLoad.bind(this));\n      this.events.on('refresh', this.onRefresh.bind(this));\n\n      // Refresh after plotly is loaded\n      this.refresh();\n    });\n\n    // Standard handlers\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('panel-initialized', this.onPanelInitialized.bind(this));\n  }\n\n  getCssRule(selectorText): CSSStyleRule | null {\n    const styleSheets = document.styleSheets;\n    for (let idx = 0; idx < styleSheets.length; idx += 1) {\n      const styleSheet = styleSheets[idx] as CSSStyleSheet;\n      const rules = styleSheet.cssRules;\n      for (let ruleIdx = 0; ruleIdx < rules.length; ruleIdx += 1) {\n        const rule = rules[ruleIdx] as CSSStyleRule;\n        if (rule.selectorText === selectorText) {\n          return rule;\n        }\n      }\n    }\n    return null;\n  }\n\n  // Don't call resize too quickly\n  doResize = _.debounce(() => {\n    // https://github.com/alonho/angular-plotly/issues/26\n    const e = window.getComputedStyle(this.graphDiv).display;\n    if (!e || 'none' === e) {\n      // not drawn!\n      console.warn('resize a plot that is not drawn yet');\n    } else {\n      const rect = this.graphDiv.getBoundingClientRect();\n      this.layout.width = rect.width;\n      this.layout.height = this.height;\n      Plotly.redraw(this.graphDiv);\n    }\n  }, 50);\n\n  onResize() {\n    if (this.graphDiv && this.layout && Plotly) {\n      this.doResize(); // Debounced\n    }\n  }\n\n  onDataError(err) {\n    this.series = [];\n    this.annotations.clear();\n    this.render();\n  }\n\n  onRefresh() {\n    // ignore fetching data if another panel is in fullscreen\n    if (this.otherPanelInFullscreenMode()) {\n      return;\n    }\n\n    if (this.graphDiv && this.initialized && Plotly) {\n      Plotly.redraw(this.graphDiv);\n    }\n  }\n\n  onInitEditMode() {\n    this.editor = new EditorHelper(this);\n    this.addEditorTab('Display', 'public/plugins/natel-plotly-panel/partials/tab_display.html', 2);\n    this.addEditorTab('Traces', 'public/plugins/natel-plotly-panel/partials/tab_traces.html', 3);\n    //  this.editorTabIndex = 1;\n    this.onConfigChanged(); // Sets up the axis info\n\n    // Check the size in a little bit\n    setTimeout(() => {\n      console.log('RESIZE in editor');\n      this.onResize();\n    }, 500);\n  }\n\n  processConfigMigration() {\n    console.log('Migrating Plotly Configuration to version: ' + PlotlyPanelCtrl.configVersion);\n\n    // Remove some things that should not be saved\n    const cfg = this.panel.pconfig;\n    delete cfg.layout.plot_bgcolor;\n    delete cfg.layout.paper_bgcolor;\n    delete cfg.layout.autosize;\n    delete cfg.layout.height;\n    delete cfg.layout.width;\n    delete cfg.layout.margin;\n    delete cfg.layout.scene;\n    if (!this.is3d()) {\n      delete cfg.layout.zaxis;\n    }\n\n    // Move from 'markers-lines' to checkbox\n    if (cfg.settings.mode) {\n      const old = cfg.settings.mode;\n      const show = {\n        markers: old.indexOf('markers') >= 0,\n        lines: old.indexOf('lines') >= 0,\n      };\n      _.forEach(cfg.traces, trace => {\n        trace.show = show;\n      });\n      delete cfg.settings.mode;\n    }\n\n    // TODO... MORE Migrations\n    console.log('After Migration:', cfg);\n    this.cfg = cfg;\n    this.panel.version = PlotlyPanelCtrl.configVersion;\n  }\n\n  onPanelInitialized() {\n    if (!this.panel.version || PlotlyPanelCtrl.configVersion > this.panel.version) {\n      this.processConfigMigration();\n    }\n    this._updateTraceData(true);\n  }\n\n  deepCopyWithTemplates = obj => {\n    if (_.isArray(obj)) {\n      return obj.map(val => this.deepCopyWithTemplates(val));\n    } else if (_.isString(obj)) {\n      return this.templateSrv.replace(obj, this.panel.scopedVars);\n    } else if (_.isObject(obj)) {\n      const copy = {};\n      _.forEach(obj, (v, k) => {\n        copy[k] = this.deepCopyWithTemplates(v);\n      });\n      return copy;\n    }\n    return obj;\n  };\n\n  getProcessedLayout() {\n    // Copy from config\n    const layout = this.deepCopyWithTemplates(this.cfg.layout);\n    layout.plot_bgcolor = 'transparent';\n    layout.paper_bgcolor = layout.plot_bgcolor;\n\n    // Update the size\n    const rect = this.graphDiv.getBoundingClientRect();\n    layout.autosize = false; // height is from the div\n    layout.height = this.height;\n    layout.width = rect.width;\n\n    // Make sure it is something\n    if (!layout.xaxis) {\n      layout.xaxis = {};\n    }\n    if (!layout.yaxis) {\n      layout.yaxis = {};\n    }\n\n    // Fixed scales\n    if (this.cfg.fixScale) {\n      if ('x' === this.cfg.fixScale) {\n        layout.yaxis.scaleanchor = 'x';\n      } else if ('y' === this.cfg.fixScale) {\n        layout.xaxis.scaleanchor = 'y';\n      } else if ('z' === this.cfg.fixScale) {\n        layout.xaxis.scaleanchor = 'z';\n        layout.yaxis.scaleanchor = 'z';\n      }\n    }\n\n    if (this.is3d()) {\n      if (!layout.zaxis) {\n        layout.zaxis = {};\n      }\n\n      // 3d uses 'scene' for the axis\n      layout.scene = {\n        xaxis: layout.xaxis,\n        yaxis: layout.yaxis,\n        zaxis: layout.zaxis,\n      };\n\n      delete layout.xaxis;\n      delete layout.yaxis;\n      delete layout.zaxis;\n\n      layout.margin = {\n        l: 0,\n        r: 0,\n        t: 0,\n        b: 5,\n        pad: 0,\n      };\n    } else {\n      delete layout.zaxis;\n      delete layout.scene;\n\n      // Check if the X axis should be a date\n      if (!layout.xaxis.type || layout.xaxis.type === 'auto') {\n        const mapping = _.get(this.cfg, 'traces[0].mapping.x');\n        if (mapping && mapping.indexOf('time') >= 0) {\n          layout.xaxis.type = 'date';\n        }\n      }\n\n      const isDate = layout.xaxis.type === 'date';\n      layout.margin = {\n        l: layout.yaxis.title ? 50 : 35,\n        r: 5,\n        t: 0,\n        b: layout.xaxis.title ? 65 : isDate ? 40 : 30,\n        pad: 2,\n      };\n\n      // Set the range to the query window\n      if (isDate && !layout.xaxis.range) {\n        const range = this.timeSrv.timeRange();\n        layout.xaxis.range = [range.from.valueOf(), range.to.valueOf()];\n      }\n\n      // get the css rule of grafana graph axis text\n      const labelStyle = this.getCssRule('div.flot-text');\n      if (labelStyle) {\n        let color = labelStyle.style.color;\n        if (!layout.font) {\n          layout.font = {};\n        }\n        layout.font.color = color;\n\n        // make the grid a little more transparent\n        color = $.color\n          .parse(color)\n          .scale('a', 0.22)\n          .toString();\n\n        // set gridcolor (like grafana graph)\n        layout.xaxis.gridcolor = color;\n        layout.yaxis.gridcolor = color;\n      }\n\n      // Set the second axis\n      layout.yaxis2 = PlotlyPanelCtrl.yaxis2;\n    }\n    return layout;\n  }\n\n  onRender() {\n    // ignore fetching data if another panel is in fullscreen\n    if (this.otherPanelInFullscreenMode() || !this.graphDiv) {\n      return;\n    }\n\n    if (!Plotly) {\n      return;\n    }\n\n    if (!this.initialized) {\n      const s = this.cfg.settings;\n\n      const options = {\n        showLink: false,\n        displaylogo: false,\n        displayModeBar: s.displayModeBar,\n        modeBarButtonsToRemove: ['sendDataToCloud'], //, 'select2d', 'lasso2d']\n      };\n\n      this.layout = this.getProcessedLayout();\n      this.layout.shapes = this.annotations.shapes;\n      let traces = this.traces;\n      if (this.annotations.shapes.length > 0) {\n        traces = this.traces.concat(this.annotations.trace);\n      }\n      Plotly.react(this.graphDiv, traces, this.layout, options);\n\n      this.graphDiv.on('plotly_click', data => {\n        if (data === undefined || data.points === undefined) {\n          return;\n        }\n        for (let i = 0; i < data.points.length; i++) {\n          const idx = data.points[i].pointNumber;\n          const ts = this.traces[0].ts[idx];\n          // console.log( 'CLICK!!!', ts, data );\n          const msg = data.points[i].x.toPrecision(4) + ', ' + data.points[i].y.toPrecision(4);\n          this.$rootScope.appEvent('alert-success', [\n            msg,\n            '@ ' + this.dashboard.formatDate(moment(ts)),\n          ]);\n        }\n      });\n\n      // if(true) {\n      //   this.graphDiv.on('plotly_hover', (data, xxx) => {\n      //     console.log( 'HOVER!!!', data, xxx, this.mouse );\n      //     if(data.points.length>0) {\n      //       var idx = 0;\n      //       var pt = data.points[idx];\n\n      //       var body = '<div class=\"graph-tooltip-time\">'+ pt.pointNumber +'</div>';\n      //       body += \"<center>\";\n      //       body += pt.x + ', '+pt.y;\n      //       body += \"</center>\";\n\n      //       //this.$tooltip.html( body ).place_tt( this.mouse.pageX + 10, this.mouse.pageY );\n      //     }\n      //   }).on('plotly_unhover', (data) => {\n      //     //this.$tooltip.detach();\n      //   });\n      // }\n\n      this.graphDiv.on('plotly_selected', data => {\n        if (data === undefined || data.points === undefined) {\n          return;\n        }\n\n        if (data.points.length === 0) {\n          console.log('Nothing Selected', data);\n          return;\n        }\n\n        console.log('SELECTED', data);\n\n        let min = Number.MAX_SAFE_INTEGER;\n        let max = Number.MIN_SAFE_INTEGER;\n\n        for (let i = 0; i < data.points.length; i++) {\n          const found = data.points[i];\n          const idx = found.pointNumber;\n          const ts = found.fullData.x[idx];\n          min = Math.min(min, ts);\n          max = Math.max(max, ts);\n        }\n\n        // At least 2 seconds\n        min -= 1000;\n        max += 1000;\n\n        const range = {from: moment.utc(min), to: moment.utc(max)};\n\n        console.log('SELECTED!!!', min, max, data.points.length, range);\n\n        this.timeSrv.setTime(range);\n\n        // rebuild the graph after query\n        if (this.graphDiv) {\n          Plotly.Plots.purge(this.graphDiv);\n          this.graphDiv.innerHTML = '';\n          this.initialized = false;\n        }\n      });\n      this.initialized = true;\n    } else if (this.initialized) {\n      Plotly.redraw(this.graphDiv);\n    } else {\n      console.log('Not initialized yet!');\n    }\n  }\n\n  onDataSnapshotLoad(snapshot) {\n    this.onDataReceived(snapshot);\n  }\n\n  _hadAnno = false;\n\n  onDataReceived(dataList) {\n    const finfo: SeriesWrapper[] = [];\n    let seriesHash = '/';\n    if (dataList && dataList.length > 0) {\n      const useRefID = dataList.length === this.panel.targets.length;\n      dataList.forEach((series, sidx) => {\n        let refId = '';\n        if (useRefID) {\n          refId = _.get(this.panel, 'targets[' + sidx + '].refId');\n          if (!refId) {\n            refId = String.fromCharCode('A'.charCodeAt(0) + sidx);\n          }\n        }\n        if (series.columns) {\n          for (let i = 0; i < series.columns.length; i++) {\n            finfo.push(new SeriesWrapperTable(refId, series, i));\n          }\n          finfo.push(new SeriesWrapperTableRow(refId, series));\n        } else if (series.target) {\n          finfo.push(new SeriesWrapperSeries(refId, series, 'value'));\n          finfo.push(new SeriesWrapperSeries(refId, series, 'time'));\n          finfo.push(new SeriesWrapperSeries(refId, series, 'index'));\n        } else {\n          console.error('Unsupported Series response', sidx, series);\n        }\n      });\n    }\n    this.seriesByKey.clear();\n    finfo.forEach(s => {\n      s.getAllKeys().forEach(k => {\n        this.seriesByKey.set(k, s);\n        seriesHash += '$' + k;\n      });\n    });\n    this.series = finfo;\n\n    // Now Process the loaded data\n    const hchanged = this.seriesHash !== seriesHash;\n    if (hchanged && this.editor) {\n      EditorHelper.updateMappings(this);\n      this.editor.selectTrace(this.editor.traceIndex);\n      this.editor.onConfigChanged();\n    }\n\n    if (hchanged || !this.initialized) {\n      this.onConfigChanged();\n      this.seriesHash = seriesHash;\n    }\n\n    // Support Annotations\n    let annotationPromise = Promise.resolve();\n    if (!this.cfg.showAnnotations || this.is3d()) {\n      this.annotations.clear();\n      if (this.layout) {\n        if (this.layout.shapes) {\n          this.onConfigChanged();\n        }\n        this.layout.shapes = [];\n      }\n    } else {\n      annotationPromise = this.annotationsSrv\n        .getAnnotations({\n          dashboard: this.dashboard,\n          panel: this.panel,\n          range: this.range,\n        })\n        .then(results => {\n          const hasAnno = this.annotations.update(results);\n          if (this.layout) {\n            if (hasAnno !== this._hadAnno) {\n              this.onConfigChanged();\n            }\n            this.layout.shapes = this.annotations.shapes;\n          }\n          this._hadAnno = hasAnno;\n        });\n    }\n\n    // Load the real data changes\n    annotationPromise.then(() => {\n      this._updateTraceData();\n      this.render();\n    });\n  }\n\n  __addCopyPath(trace: any, key: string, path: string) {\n    if (key) {\n      trace.__set.push({\n        key: key,\n        path: path,\n      });\n      const s: SeriesWrapper = this.seriesByKey.get(key);\n      if (!s) {\n        this.dataWarnings.push('Unable to find: ' + key + ' for ' + trace.name + ' // ' + path);\n      }\n    }\n  }\n\n  // This will update all trace settings *except* the data\n  _updateTracesFromConfigs() {\n    this.dataWarnings = [];\n\n    // Make sure we have a trace\n    if (this.cfg.traces == null || this.cfg.traces.length < 1) {\n      this.cfg.traces = [_.cloneDeep(PlotlyPanelCtrl.defaultTrace)];\n    }\n\n    const is3D = this.is3d();\n    this.traces = this.cfg.traces.map((tconfig, idx) => {\n      const config = this.deepCopyWithTemplates(tconfig) || {};\n      _.defaults(config, PlotlyPanelCtrl.defaults);\n      const mapping = config.mapping;\n\n      const trace: any = {\n        name: config.name || EditorHelper.createTraceName(idx),\n        type: this.cfg.settings.type,\n        mode: 'markers+lines', // really depends on config settings\n        __set: [], // { key:? property:? }\n      };\n\n      let mode = '';\n      if (config.show.markers) {\n        mode += '+markers';\n        trace.marker = config.settings.marker;\n\n        delete trace.marker.sizemin;\n        delete trace.marker.sizemode;\n        delete trace.marker.sizeref;\n\n        if (config.settings.color_option === 'ramp') {\n          this.__addCopyPath(trace, mapping.color, 'marker.color');\n        } else {\n          delete trace.marker.colorscale;\n          delete trace.marker.showscale;\n        }\n      }\n\n      if (config.show.lines) {\n        mode += '+lines';\n        trace.line = config.settings.line;\n      }\n\n      // Set the text\n      this.__addCopyPath(trace, mapping.text, 'text');\n      this.__addCopyPath(trace, mapping.x, 'x');\n      this.__addCopyPath(trace, mapping.y, 'y');\n\n      if (is3D) {\n        this.__addCopyPath(trace, mapping.z, 'z');\n      }\n\n      // Set the trace mode\n      if (mode) {\n        trace.mode = mode.substring(1);\n      }\n      return trace;\n    });\n  }\n\n  // Fills in the required data into the trace values\n  _updateTraceData(force = false): boolean {\n    if (!this.series) {\n      // console.log('NO Series data yet!');\n      return false;\n    }\n\n    if (force || !this.traces) {\n      this._updateTracesFromConfigs();\n    } else if (this.traces.length !== this.cfg.traces.length) {\n      console.log(\n        'trace number mismatch.  Found: ' +\n          this.traces.length +\n          ', expect: ' +\n          this.cfg.traces.length\n      );\n      this._updateTracesFromConfigs();\n    }\n\n    // Use zero when the metric value is missing\n    // Plotly gets lots of errors when the values are missing\n    let zero: any = [];\n    this.traces.forEach(trace => {\n      if (trace.__set) {\n        trace.__set.forEach(v => {\n          const s = this.seriesByKey.get(v.key);\n          let vals: any[] = zero;\n          if (s) {\n            vals = s.toArray();\n            if (vals && vals.length > zero.length) {\n              zero = Array.from(Array(3), () => 0);\n            }\n          } else {\n            if (!this.error) {\n              this.error = '';\n            }\n            this.error += 'Unable to find: ' + v.key + ' (using zeros).  ';\n          }\n          if (!vals) {\n            vals = zero;\n          }\n          _.set(trace, v.path, vals);\n        });\n      }\n    });\n\n    //console.log('SetDATA', this.traces);\n    return true;\n  }\n\n  onConfigChanged() {\n    // Force reloading the traces\n    this._updateTraceData(true);\n\n    if (!Plotly) {\n      return;\n    }\n\n    // Check if the plotly library changed\n    loadIfNecessary(this.cfg).then(res => {\n      if (res) {\n        if (Plotly) {\n          Plotly.purge(this.graphDiv);\n        }\n        Plotly = res;\n      }\n\n      // Updates the layout and redraw\n      if (this.initialized && this.graphDiv) {\n        if (!this.cfg.showAnnotations) {\n          this.annotations.clear();\n        }\n\n        const s = this.cfg.settings;\n        const options = {\n          showLink: false,\n          displaylogo: false,\n          displayModeBar: s.displayModeBar,\n          modeBarButtonsToRemove: ['sendDataToCloud'], //, 'select2d', 'lasso2d']\n        };\n        this.layout = this.getProcessedLayout();\n        this.layout.shapes = this.annotations.shapes;\n        let traces = this.traces;\n        if (this.annotations.shapes.length > 0) {\n          traces = this.traces.concat(this.annotations.trace);\n        }\n        console.log('ConfigChanged (traces)', traces);\n        Plotly.react(this.graphDiv, traces, this.layout, options);\n      }\n\n      this.render(); // does not query again!\n    });\n  }\n\n  is3d() {\n    return this.cfg.settings.type === 'scatter3d';\n  }\n\n  link(scope, elem, attrs, ctrl) {\n    this.graphDiv = elem.find('.plotly-spot')[0];\n    this.initialized = false;\n    elem.on('mousemove', evt => {\n      this.mouse = evt;\n    });\n\n    //let p = $(this.graphDiv).parent().parent()[0];\n    //console.log( 'PLOT', this.graphDiv, p );\n  }\n}\n\nexport {PlotlyPanelCtrl, PlotlyPanelCtrl as PanelCtrl};\n","import _ from 'lodash';\n\n// This gives a standard way to get a value for a given field\nexport abstract class SeriesWrapper {\n  refId: string; // From Query Target\n  name: string;\n\n  type?: 'string' | 'date' | 'boolean' | 'epoch' | 'number';\n  first?: any;\n  count: number;\n\n  /** @ngInject */\n  constructor(refId: string) {\n    this.refId = refId;\n  }\n\n  protected setFirst(v: any) {\n    this.first = v;\n    if (_.isNumber(v)) {\n      this.type = 'number';\n    } else if (_.isString(v)) {\n      this.type = 'string';\n    } else if (typeof v === typeof true) {\n      this.type = 'boolean';\n    }\n  }\n\n  // The best key for this field\n  getKey(): string {\n    return this.name;\n  }\n\n  // All ways to access this field\n  getAllKeys(): string[] {\n    return [this.getKey()];\n  }\n\n  abstract toArray(): Array<string | number | boolean>;\n}\n\nexport class SeriesWrapperSeries extends SeriesWrapper {\n  value: 'value' | 'index' | 'time';\n\n  /** @ngInject */\n  constructor(refId: string, public series: any, val: 'value' | 'index' | 'time') {\n    super(refId);\n    this.value = val;\n    this.count = series.datapoints.length;\n    this.name = series.target;\n\n    if ('index' === val) {\n      this.first = 0;\n      this.type = 'number';\n      this.name += '@index';\n      return;\n    }\n    if ('value' === val) {\n      _.forEach(series.datapoints, arr => {\n        if (arr[0] !== null) {\n          // 0 is an ok value so cant use if(arr[0])\n          this.setFirst(arr[0]);\n          return false;\n        }\n        return true; // continue\n      });\n      return;\n    }\n    if ('time' === val) {\n      this.type = 'epoch';\n      this.first = series.datapoints[0][1];\n      this.name += '@time';\n      return;\n    }\n  }\n\n  toArray(): any[] {\n    if ('index' === this.value) {\n      const arr = new Array(this.count);\n      for (let i = 0; i < this.count; i++) {\n        arr[i] = i;\n      }\n      return arr;\n    }\n    const idx = 'time' === this.value ? 1 : 0;\n    return _.map(this.series.datapoints, arr => {\n      return arr[idx];\n    });\n  }\n\n  getAllKeys(): string[] {\n    if (this.refId) {\n      const vals = [this.name, this.refId + '@' + this.value, this.refId + '/' + this.name];\n\n      if ('A' === this.refId) {\n        vals.push('@' + this.value);\n      }\n      return vals;\n    }\n    return [this.name];\n  }\n}\n\nexport class SeriesWrapperTableRow extends SeriesWrapper {\n  /** @ngInject */\n  constructor(refId: string, public table: any) {\n    super(refId);\n\n    this.name = refId + '@row';\n  }\n\n  toArray(): any[] {\n    const count = this.table.rows.length;\n    const arr = new Array(count);\n    for (let i = 0; i < count; i++) {\n      arr[i] = i;\n    }\n    return arr;\n  }\n}\n\nexport class SeriesWrapperTable extends SeriesWrapper {\n  /** @ngInject */\n  constructor(refId: string, public table: any, public index: number) {\n    super(refId);\n    this.count = table.rows.length;\n\n    const col = table.columns[index];\n    if (!col) {\n      throw new Error('Unkonwn Column: ' + index);\n    }\n\n    this.name = col.text;\n    if ('time' === col.type) {\n      this.type = 'epoch';\n      this.first = table.rows[0][index];\n    } else {\n      for (let i = 0; i < this.count; i++) {\n        const v = table.rows[i][index];\n        if (v !== null) {\n          // 0 is an ok value so cant use if(v)\n          this.setFirst(v);\n          return;\n        }\n      }\n    }\n  }\n\n  toArray(): any[] {\n    return _.map(this.table.rows, row => {\n      return row[this.index];\n    });\n  }\n\n  getAllKeys(): string[] {\n    if (this.refId) {\n      return [this.getKey(), this.refId + '/' + this.name, this.refId + '[' + this.index + ']'];\n    }\n    return [this.getKey()];\n  }\n}\n","import _ from 'lodash';\n\nimport {PlotlyPanelCtrl} from './module';\n\nclass AxisInfo {\n  label: string;\n  layout: any; // The config saved in layout\n  property: string; // mapping property to check in a trace\n  segment: any; // The Grafana <metric-segment\n}\n\nconst REMOVE_KEY = '-- remove --';\n\nexport class EditorHelper {\n  axis = new Array<AxisInfo>();\n  trace: any; // Trace Config\n  traceIndex = 0;\n  traces: any[]; // array of configs;\n\n  symbol: any; // The Grafana <metric-segment for this symbol\n  mapping: any = {}; // The Grafana <metric-segment for this symbol\n\n  /** @ngInject */\n  constructor(public ctrl: PlotlyPanelCtrl) {\n    EditorHelper.updateMappings(ctrl);\n    this.selectTrace(0);\n  }\n\n  // Callback when the query results changed\n  static updateMappings(ctrl: PlotlyPanelCtrl): boolean {\n    if (ctrl.series == null || ctrl.series.length < 1) {\n      return false;\n    }\n\n    const defaultMappings = {\n      first: ctrl.series[0].getKey(),\n      time: ctrl.series[1].getKey(),\n    };\n\n    let changed = false;\n    ctrl.cfg.traces.forEach(trace => {\n      _.defaults(trace, PlotlyPanelCtrl.defaultTrace);\n      const mapping = trace.mapping;\n      if (!mapping.color) {\n        mapping.color = defaultMappings.first;\n        changed = true;\n      }\n      if (!mapping.x) {\n        mapping.x = defaultMappings.time;\n        changed = true;\n      }\n      if (!mapping.y) {\n        mapping.y = defaultMappings.first;\n        changed = true;\n      }\n      if (ctrl.is3d() && !mapping.z) {\n        mapping.z = defaultMappings.first;\n        changed = true;\n      }\n    });\n    return changed;\n  }\n\n  onConfigChanged() {\n    this.onUpdateAxis(); // Every time????\n\n    // Initalize the axis\n    for (let i = 0; i < this.axis.length; i++) {\n      if (this.axis[i].layout.rangemode === 'between') {\n        if (!_.isArray(this.axis[i].layout.range)) {\n          this.axis[i].layout.range = [0, null];\n        }\n      } else {\n        delete this.axis[i].layout.range;\n      }\n    }\n\n    this.ctrl.onConfigChanged();\n  }\n\n  onUpdateAxis() {\n    const mapping = this.trace.mapping;\n    if (!mapping) {\n      console.error('Missing mappings for trace', this.trace);\n      return;\n    }\n\n    const layout = this.ctrl.cfg.layout;\n    if (!layout.xaxis) {\n      layout.xaxis = {};\n    }\n    if (!layout.yaxis) {\n      layout.yaxis = {};\n    }\n\n    this.axis = [];\n    this.axis.push({\n      label: 'X Axis',\n      layout: layout.xaxis,\n      property: 'x',\n      segment: this.mapping.x,\n    });\n    this.axis.push({\n      label: 'Y Axis',\n      layout: layout.yaxis,\n      property: 'y',\n      segment: this.mapping.y,\n    });\n\n    if (this.ctrl.is3d()) {\n      if (!layout.zaxis) {\n        layout.zaxis = {};\n      }\n      this.axis.push({\n        label: 'Z Axis',\n        layout: layout.zaxis,\n        property: 'z',\n        segment: this.mapping.z,\n      });\n    }\n  }\n\n  //-----------------------------------------------------------------------\n  // Manage Traces\n  //-----------------------------------------------------------------------\n\n  selectTrace(index: number) {\n    this.traces = this.ctrl.cfg.traces;\n    if (!this.traces || this.traces.length < 1) {\n      this.traces = this.ctrl.cfg.traces = [_.deepClone(PlotlyPanelCtrl.defaultTrace)];\n    }\n    if (index >= this.ctrl.cfg.traces.length) {\n      index = this.ctrl.cfg.traces.length - 1;\n    }\n    this.trace = this.ctrl.cfg.traces[index];\n    this.traceIndex = index;\n\n    _.defaults(this.trace, PlotlyPanelCtrl.defaultTrace);\n    if (!this.trace.name) {\n      this.trace.name = EditorHelper.createTraceName(index);\n    }\n\n    // The _defaults makes sure this is taken care of\n    this.symbol = this.ctrl.uiSegmentSrv.newSegment({\n      value: this.trace.settings.marker.symbol,\n    });\n\n    // Now set one for each key\n    this.mapping = {};\n    _.forEach(this.trace.mapping, (value, key) => {\n      this.updateSegMapping(value, key);\n    });\n\n    console.log('Editor Info', this);\n\n    this.onConfigChanged();\n    this.ctrl.refresh();\n  }\n\n  private updateSegMapping(value, key, updateTrace = false) {\n    if (REMOVE_KEY === value) {\n      this.mapping[key] = this.ctrl.uiSegmentSrv.newSegment({\n        value: 'Select Metric',\n        fake: true,\n      });\n      value = null; // will set this value later\n    } else if (value) {\n      const s = this.ctrl.seriesByKey.get(value);\n      const opts: any = {\n        value: value,\n        series: s,\n      };\n      if (!s) {\n        //  opts.fake = true;\n        opts.html = value + '  <i class=\"fa fa-exclamation-triangle\"></i>';\n      }\n      this.mapping[key] = this.ctrl.uiSegmentSrv.newSegment(opts);\n    } else {\n      this.mapping[key] = this.ctrl.uiSegmentSrv.newSegment({\n        value: 'Select Metric',\n        fake: true,\n      });\n    }\n\n    if (updateTrace) {\n      this.trace.mapping[key] = value;\n      console.log('SET', key, value, this.trace.mapping);\n    }\n  }\n\n  createTrace() {\n    let trace: any = {};\n    if (this.ctrl.cfg.traces.length > 0) {\n      trace = _.cloneDeep(this.ctrl.cfg.traces[this.ctrl.cfg.traces.length - 1]);\n    } else {\n      trace = _.deepClone(PlotlyPanelCtrl.defaultTrace);\n    }\n    trace.name = EditorHelper.createTraceName(this.ctrl.traces.length);\n    this.ctrl.cfg.traces.push(trace);\n    this.selectTrace(this.ctrl.cfg.traces.length - 1);\n  }\n\n  removeCurrentTrace() {\n    // TODO... better behavior\n    if (this.traces.length <= 1) {\n      console.error('Wont remove a single trace', this);\n      return;\n    }\n\n    for (let i = 0; i < this.traces.length; i++) {\n      if (this.trace === this.traces[i]) {\n        this.traces.splice(i, 1);\n        if (i >= this.traces.length) {\n          i = this.traces.length - 1;\n        }\n        this.ctrl.onConfigChanged();\n        this.ctrl._updateTraceData(true);\n        this.selectTrace(i);\n        this.ctrl.refresh();\n        return;\n      }\n    }\n\n    console.error('Could not find', this);\n  }\n\n  static createTraceName(idx: number) {\n    return 'Trace ' + (idx + 1);\n  }\n\n  //-----------------------------------------------------------------------\n  // SERIES\n  //-----------------------------------------------------------------------\n\n  getSeriesSegs(withRemove = false): Promise<any[]> {\n    return new Promise((resolve, reject) => {\n      const series: any[] = [];\n\n      if (withRemove) {\n        series.push(\n          this.ctrl.uiSegmentSrv.newSegment({\n            fake: true,\n            value: REMOVE_KEY,\n            series: null,\n          })\n        );\n      }\n      this.ctrl.series.forEach(s => {\n        series.push(\n          this.ctrl.uiSegmentSrv.newSegment({\n            value: s.name,\n            series: s,\n          })\n        );\n      });\n\n      //console.log('GET Segments:', withRemove, series);\n      //console.log('ALL Series:', this.ctrl.series);\n      resolve(series);\n    });\n  }\n\n  onAxisSeriesChanged(axis: AxisInfo) {\n    this.updateSegMapping(axis.segment.value, axis.property, true);\n    this.onConfigChanged();\n  }\n\n  getTextSegments(): any[] {\n    return [this.mapping.text];\n  }\n\n  onTextMetricChanged(sss: any) {\n    const seg = this.mapping.text;\n    this.updateSegMapping(seg.value, 'text', true);\n    this.onConfigChanged();\n  }\n\n  getColorSegments(): any[] {\n    if (this.trace.settings.color_option === 'ramp') {\n      return [this.mapping.color];\n    }\n    return [];\n  }\n\n  onColorChanged() {\n    const seg = this.mapping.color;\n    this.updateSegMapping(seg.value, 'color', true);\n    this.onConfigChanged();\n  }\n\n  //-----------------------------------------------------------------------\n  // SYMBOLS\n  //-----------------------------------------------------------------------\n\n  onSymbolChanged() {\n    this.trace.settings.marker.symbol = this.symbol.value;\n    this.onConfigChanged();\n  }\n\n  getSymbolSegs(): Promise<any[]> {\n    return new Promise((resolve, reject) => {\n      const txt = [\n        'circle',\n        'circle-open',\n        'circle-dot',\n        'circle-open-dot',\n        'square',\n        'square-open',\n        'square-dot',\n        'square-open-dot',\n        'diamond',\n        'diamond-open',\n        'diamond-dot',\n        'diamond-open-dot',\n        'cross',\n        'cross-open',\n        'cross-dot',\n        'cross-open-dot',\n        'x',\n        'x-open',\n        'x-dot',\n        'x-open-dot',\n        'triangle-up',\n        'triangle-up-open',\n        'triangle-up-dot',\n        'triangle-up-open-dot',\n        'triangle-down',\n        'triangle-down-open',\n        'triangle-down-dot',\n        'triangle-down-open-dot',\n        'triangle-left',\n        'triangle-left-open',\n        'triangle-left-dot',\n        'triangle-left-open-dot',\n        'triangle-right',\n        'triangle-right-open',\n        'triangle-right-dot',\n        'triangle-right-open-dot',\n        'triangle-ne',\n        'triangle-ne-open',\n        'triangle-ne-dot',\n        'triangle-ne-open-dot',\n        'triangle-se',\n        'triangle-se-open',\n        'triangle-se-dot',\n        'triangle-se-open-dot',\n        'triangle-sw',\n        'triangle-sw-open',\n        'triangle-sw-dot',\n        'triangle-sw-open-dot',\n        'triangle-nw',\n        'triangle-nw-open',\n        'triangle-nw-dot',\n        'triangle-nw-open-dot',\n        'pentagon',\n        'pentagon-open',\n        'pentagon-dot',\n        'pentagon-open-dot',\n        'hexagon',\n        'hexagon-open',\n        'hexagon-dot',\n        'hexagon-open-dot',\n        'hexagon2',\n        'hexagon2-open',\n        'hexagon2-dot',\n        'hexagon2-open-dot',\n        'octagon',\n        'octagon-open',\n        'octagon-dot',\n        'octagon-open-dot',\n        'star',\n        'star-open',\n        'star-dot',\n        'star-open-dot',\n        'hexagram',\n        'hexagram-open',\n        'hexagram-dot',\n        'hexagram-open-dot',\n        'star-triangle-up',\n        'star-triangle-up-open',\n        'star-triangle-up-dot',\n        'star-triangle-up-open-dot',\n        'star-triangle-down',\n        'star-triangle-down-open',\n        'star-triangle-down-dot',\n        'star-triangle-down-open-dot',\n        'star-square',\n        'star-square-open',\n        'star-square-dot',\n        'star-square-open-dot',\n        'star-diamond',\n        'star-diamond-open',\n        'star-diamond-dot',\n        'star-diamond-open-dot',\n        'diamond-tall',\n        'diamond-tall-open',\n        'diamond-tall-dot',\n        'diamond-tall-open-dot',\n        'diamond-wide',\n        'diamond-wide-open',\n        'diamond-wide-dot',\n        'diamond-wide-open-dot',\n        'hourglass',\n        'hourglass-open',\n        'bowtie',\n        'bowtie-open',\n        'circle-cross',\n        'circle-cross-open',\n        'circle-x',\n        'circle-x-open',\n        'square-cross',\n        'square-cross-open',\n        'square-x',\n        'square-x-open',\n        'diamond-cross',\n        'diamond-cross-open',\n        'diamond-x',\n        'diamond-x-open',\n        'cross-thin',\n        'cross-thin-open',\n        'x-thin',\n        'x-thin-open',\n        'asterisk',\n        'asterisk-open',\n        'hash',\n        'hash-open',\n        'hash-dot',\n        'hash-open-dot',\n        'y-up',\n        'y-up-open',\n        'y-down',\n        'y-down-open',\n        'y-left',\n        'y-left-open',\n        'y-right',\n        'y-right-open',\n        'line-ew',\n        'line-ew-open',\n        'line-ns',\n        'line-ns-open',\n        'line-ne',\n        'line-ne-open',\n        'line-nw',\n        'line-nw-open',\n      ];\n\n      const segs: any[] = [];\n      _.forEach(txt, val => {\n        segs.push(this.ctrl.uiSegmentSrv.newSegment(val));\n      });\n      resolve(segs);\n    });\n  }\n}\n","import $script from 'scriptjs';\n\nlet loaded: any; // Plotly Library\nlet isFull = false;\nlet wasCDN = false;\n\nexport function loadPlotly(cfg: any): Promise<any> {\n  if (loaded) {\n    console.log('using already loaded value');\n    return Promise.resolve(loaded);\n  }\n\n  const needsFull = cfg.settings.type !== 'scatter';\n  let url = 'public/plugins/natel-plotly-panel/lib/plotly-cartesian.min.js';\n  if (cfg.loadFromCDN) {\n    url = needsFull\n      ? 'https://cdn.plot.ly/plotly-latest.min.js'\n      : 'https://cdn.plot.ly/plotly-cartesian-latest.min.js';\n  } else if (needsFull) {\n    url = 'public/plugins/natel-plotly-panel/lib/plotly.min.js';\n  }\n  return new Promise((resolve, reject) => {\n    $script(url, resolve);\n  }).then(res => {\n    isFull = needsFull;\n    wasCDN = cfg.loadFromCDN;\n    loaded = window['Plotly'];\n    return loaded;\n  });\n}\n\nexport function loadIfNecessary(cfg: any): Promise<any> {\n  if (!loaded) {\n    return loadPlotly(cfg);\n  }\n\n  if (wasCDN !== cfg.loadFromCDN) {\n    console.log('Use CDN', cfg.loadFromCDN);\n    loaded = null;\n    return loadPlotly(cfg);\n  }\n\n  const needsFull = cfg.settings.type !== 'scatter';\n  if (needsFull && !isFull) {\n    console.log('Switching to the full plotly library');\n    loaded = null;\n    return loadPlotly(cfg);\n  }\n\n  // No changes\n  return Promise.resolve(null);\n}\n","/*!\n  * $script.js JS loader & dependency manager\n  * https://github.com/ded/script.js\n  * (c) Dustin Diaz 2014 | License MIT\n  */\n\n(function (name, definition) {\n  if (typeof module != 'undefined' && module.exports) module.exports = definition()\n  else if (typeof define == 'function' && define.amd) define(definition)\n  else this[name] = definition()\n})('$script', function () {\n  var doc = document\n    , head = doc.getElementsByTagName('head')[0]\n    , s = 'string'\n    , f = false\n    , push = 'push'\n    , readyState = 'readyState'\n    , onreadystatechange = 'onreadystatechange'\n    , list = {}\n    , ids = {}\n    , delay = {}\n    , scripts = {}\n    , scriptpath\n    , urlArgs\n\n  function every(ar, fn) {\n    for (var i = 0, j = ar.length; i < j; ++i) if (!fn(ar[i])) return f\n    return 1\n  }\n  function each(ar, fn) {\n    every(ar, function (el) {\n      fn(el)\n      return 1\n    })\n  }\n\n  function $script(paths, idOrDone, optDone) {\n    paths = paths[push] ? paths : [paths]\n    var idOrDoneIsDone = idOrDone && idOrDone.call\n      , done = idOrDoneIsDone ? idOrDone : optDone\n      , id = idOrDoneIsDone ? paths.join('') : idOrDone\n      , queue = paths.length\n    function loopFn(item) {\n      return item.call ? item() : list[item]\n    }\n    function callback() {\n      if (!--queue) {\n        list[id] = 1\n        done && done()\n        for (var dset in delay) {\n          every(dset.split('|'), loopFn) && !each(delay[dset], loopFn) && (delay[dset] = [])\n        }\n      }\n    }\n    setTimeout(function () {\n      each(paths, function loading(path, force) {\n        if (path === null) return callback()\n        \n        if (!force && !/^https?:\\/\\//.test(path) && scriptpath) {\n          path = (path.indexOf('.js') === -1) ? scriptpath + path + '.js' : scriptpath + path;\n        }\n        \n        if (scripts[path]) {\n          if (id) ids[id] = 1\n          return (scripts[path] == 2) ? callback() : setTimeout(function () { loading(path, true) }, 0)\n        }\n\n        scripts[path] = 1\n        if (id) ids[id] = 1\n        create(path, callback)\n      })\n    }, 0)\n    return $script\n  }\n\n  function create(path, fn) {\n    var el = doc.createElement('script'), loaded\n    el.onload = el.onerror = el[onreadystatechange] = function () {\n      if ((el[readyState] && !(/^c|loade/.test(el[readyState]))) || loaded) return;\n      el.onload = el[onreadystatechange] = null\n      loaded = 1\n      scripts[path] = 2\n      fn()\n    }\n    el.async = 1\n    el.src = urlArgs ? path + (path.indexOf('?') === -1 ? '?' : '&') + urlArgs : path;\n    head.insertBefore(el, head.lastChild)\n  }\n\n  $script.get = create\n\n  $script.order = function (scripts, id, done) {\n    (function callback(s) {\n      s = scripts.shift()\n      !scripts.length ? $script(s, id, done) : $script(s, callback)\n    }())\n  }\n\n  $script.path = function (p) {\n    scriptpath = p\n  }\n  $script.urlArgs = function (str) {\n    urlArgs = str;\n  }\n  $script.ready = function (deps, ready, req) {\n    deps = deps[push] ? deps : [deps]\n    var missing = [];\n    !each(deps, function (dep) {\n      list[dep] || missing[push](dep);\n    }) && every(deps, function (dep) {return list[dep]}) ?\n      ready() : !function (key) {\n      delay[key] = delay[key] || []\n      delay[key][push](ready)\n      req && req(missing)\n    }(deps.join('|'))\n    return $script\n  }\n\n  $script.done = function (idOrDone) {\n    $script([null], idOrDone)\n  }\n\n  return $script\n});\n","import {Shape, Data} from 'plotly.js';\n\nexport class AnnoInfo {\n  trace: Data;\n  shapes: Shape[];\n\n  constructor() {\n    this.clear();\n  }\n\n  clear() {\n    this.shapes = [];\n    this.trace = {\n      mode: 'markers',\n      type: 'scatter',\n      hoverinfo: 'x+text',\n      x: [],\n      y: [],\n      text: [],\n      yaxis: 'y2',\n      marker: {\n        size: 15,\n        symbol: 'triangle-up',\n        color: [],\n      },\n    };\n  }\n\n  update(results: any): boolean {\n    if (!results || !results.annotations) {\n      this.clear();\n      return false;\n    }\n\n    const x: number[] = [];\n    const y: number[] = [];\n    const text: string[] = [];\n    const color: string[] = [];\n\n    this.shapes = results.annotations.map(a => {\n      x.push(a.time);\n      y.push(0);\n      text.push('XXXX');\n      color.push(a.annotation.iconColor);\n\n      return {\n        type: 'line', // rect\n        xref: 'x',\n        yref: 'paper',\n        x0: a.time,\n        y0: 0,\n        x1: a.time,\n        y1: 1,\n\n        visible: true,\n        layer: 'above',\n\n        fillcolor: a.annotation.iconColor,\n        opacity: 0.8,\n        line: {\n          color: a.annotation.iconColor,\n          width: 1,\n          dash: 'dash',\n        },\n      } as Shape;\n    });\n\n    // Overwrite it with new points\n    this.trace = {...this.trace, x, y, text};\n    this.trace.marker!.color = color;\n    return x.length > 0;\n  }\n}\n"],"sourceRoot":""}